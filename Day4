Q7. Valid Anagram

Code (Accepted) (but its beats are too low) -

class Solution {
    public boolean isAnagram(String s, String t) {

        HashMap<Character, Integer> hm = new HashMap<>();
        if(s.length()!=t.length()){
            return false;
        }
        else{
            for(int i=0; i<s.length(); i++){
                char ch = s.charAt(i);
                if(hm.containsKey(ch)){
                    hm.put(ch, hm.get(ch)+1);
                }
                else{
                    hm.put(ch, 1);
                }
            }
        }

        for(int j=0; j<t.length(); j++){
            char ch=t.charAt(j);
            if(hm.containsKey(ch) && hm.get(ch)>0){
                hm.put(ch, hm.get(ch)-1);
            }
            else{
                return false;
            }
        }
        return true;
    }
}

Your code is already quite efficient, 
but we can make a small optimization 
by exiting early if we encounter a character 
in t that is not in s. 
This can reduce unnecessary work. Here's the optimized code:


Better Solution (Accepted):

import java.util.Arrays;

class Solution {
    public boolean isAnagram(String s, String t) {
        char[] sChars = s.toCharArray();
        char[] tChars = t.toCharArray();
        
        Arrays.sort(sChars);
        Arrays.sort(tChars);
        
        return Arrays.equals(sChars, tChars);
    }
}

Best Solution (Accepted):

class Solution {
    public boolean isAnagram(String s, String t) {
        int[] count = new int[26];
        
        // Count the frequency of characters in string s
        for (char x : s.toCharArray()) {
            count[x - 'a']++;
        }
        
        // Decrement the frequency of characters in string t
        for (char x : t.toCharArray()) {
            count[x - 'a']--;
        }
        
        // Check if any character has non-zero frequency
        for (int val : count) {
            if (val != 0) {
                return false;
            }
        }
        
        return true;
    }
}

