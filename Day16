Q31. Min Stack

(Accepted, can be optimised) -

class MinStack {

    private Stack<Integer> st;
    private Stack<Integer> minStack;

    public MinStack() {
        st = new Stack<>();
        minStack = new Stack<>();
        
    }
    
    public void push(int val) {
        st.push(val);
        // -2, 0
        if (minStack.isEmpty() || val <= minStack.peek()) {
            minStack.push(val);
            // -2, -3
        }
    }
    
    public void pop() {
        if (!st.isEmpty()) {
            int top = st.pop();
            
            if (top == minStack.peek()) {
                minStack.pop();
            }
        }
    }
    
    public int top() {
        if (!st.isEmpty()) {
            return st.peek();
            // 0
        }
        throw new IllegalStateException("Stack is empty");
    }
    
    public int getMin() {
        if (!minStack.isEmpty()) {
            return minStack.peek();
            // -3
        }
        throw new IllegalStateException("Stack is empty");
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
