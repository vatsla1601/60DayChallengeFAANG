Q. Two Sum

Code:

Brute (Accepted) -

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        int ans[]=new int[2];
        int a=target;
        boolean check=false;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(nums[i]+nums[j]==target && i!=j){
                    ans[0]=i;
                    ans[1]=j;
                    break;
                }
            }
            if(check){
                break;
            }
        }

        return ans;
    }
}

Little Better (Accepted)-
Optimisation - in the nested loop

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        int ans[]=new int[2];
        int a=target;
        boolean check=false;
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                if(nums[i]+nums[j]==target && i!=j){
                    ans[0]=i;
                    ans[1]=j;
                    break;
                }
            }
            if(check){
                break;
            }
        }

        return ans;
    }
}


Little more Better (Accepted)-
Optimisation - in memory of ans array

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        int a=target;
        boolean check=false;
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                if(nums[i]+nums[j]==target && i!=j){
                    return new int[]{i,j};
                }
            }
        }
        return new int[0];
    }
}

The given code is a brute-force solution to the Two Sum problem, 
where you are given an array of integers and a target sum, 
and you need to find two numbers in the array that add up to the target sum. 
While the code you provided works, it has a time complexity of O(n^2), 
which is not efficient for large input arrays. 
You can optimize it to have a time complexity of O(n) using a HashMap.

Best Approach (Accepted) -

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        Map<Integer, Integer> hm = new HashMap<>();

        for (int i=0; i<n; i++) {
            int diff = target-nums[i];
            if (hm.containsKey(diff)) {
                return new int[]{hm.get(diff), i};
            }
            hm.put(nums[i], i);
        }

        return new int[0];
    }
}
