Q11. Balanced Binary Tree

(Accepted, but the beats are low) -

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        if (root == null) {
            return true; // An empty tree is considered balanced.
        }
        
        // Calculate the height of the left and right subtrees.
        int leftHeight = getHeight(root.left);
        int rightHeight = getHeight(root.right);
        
        // Check if the current node and its subtrees are balanced.
        if (Math.abs(leftHeight - rightHeight) <= 1) {
            // Recursively check the balance of left and right subtrees.
            return isBalanced(root.left) && isBalanced(root.right);
        }
        
        return false; // If the heights differ by more than 1, the tree is not balanced.
    }
    
    // Helper function to calculate the height of a tree.
    private int getHeight(TreeNode node) {
        if (node == null) {
            return 0;
        }
        int leftHeight = getHeight(node.left);
        int rightHeight = getHeight(node.right);
        return 1 + Math.max(leftHeight, rightHeight);
    }
}
