Q12. LinkedList Cycle

Best Solution (Accepted) -

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {

      if(head==null){
          return false;
      }

      ListNode fast=head;
      ListNode slow=head;

      while(fast.next!=null && fast.next.next!=null){
          slow=slow.next;
          fast=fast.next.next;
          if(slow==fast){
              return true;
          }

      }
      return false;
    }
}


Another solution (Accepetd) -

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {

        HashSet<ListNode> st=new HashSet<>();

        while(head!=null){
            if(st.contains(head)){
                return true;
            }
            else{
                st.add(head);
            }
            head=head.next;
        }
        return false;
        
    }
}
